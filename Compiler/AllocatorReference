 void* my_malloc(size_t size)
{
	void *block;
	mm_header *header;
	size_t total_size;

	if (!size)
		return NULL;

	// lock mutex
	header = get_free_block(size);

	if (!header) {
		// get_free_block returned an existing block so return address to caller
		header->is_free = FALSE;
		// release mutex
		return (void*)(header + 1);
	}

	// set block size and allocate memory
	total_size = sizeof(mm_header) + size;
	block = sbrk(total_size);
	if (block == (void*)-1) {
		// release mutex
		return NULL;
	}

	// new block so must initialize
	header = block;
	header->size = size;
	header->is_free = FALSE;
	header->next = NULL;

	if (!mm_head)
		mm_head = header;
	if (mm_tail)
		mm_tail->next = header;

	mm_tail = header;
	// release mutex
	return (void*)(header + 1);
}

mm_header *get_free_block(size_t size)
{
	struct header_t *curr = head;
	while (curr) {
	if (curr->is_free && curr->size >= size)
	return curr;
	curr = curr->next;
	}
	return NULL;
}

void free(void *block)
{
	struct header_t *header, *tmp;
	void *programbreak;

	if (!block)
		return;
	pthread_mutex_lock(&global_malloc_lock);
	header = (struct header_t*)block - 1;

	programbreak = sbrk(0);
	if ((char*)block + header->size == programbreak) {
		if (head == tail) {
			head = tail = NULL;
		}
		else {
			tmp = head;
			while (tmp) {
				if (tmp->next == tail) {
					tmp->next = NULL;
					tail = tmp;
				}
				tmp = tmp->next;
			}
		}
		sbrk(0 - sizeof(struct header_t) - header->size);
		pthread_mutex_unlock(&global_malloc_lock);
		return;
	}
	header->is_free = 1;
	pthread_mutex_unlock(&global_malloc_lock);
}

void *calloc(size_t num, size_t nsize)
{
	size_t size;
	void *block;
	if (!num || !nsize)
		return NULL;
	size = num * nsize;
	/* check mul overflow */
	if (nsize != size / num)
		return NULL;
	block = malloc(size);
	if (!block)
		return NULL;
	memset(block, 0, size);
	return block;
}

void *realloc(void *block, size_t size)
{
	struct header_t *header;
	void *ret;
	if (!block || !size)
		return malloc(size);
	header = (struct header_t*)block - 1;
	if (header->size >= size)
		return block;
	ret = malloc(size);
	if (ret) {

		memcpy(ret, block, header->size);
		free(block);
	}
	return ret;
}